from __future__ import print_function
import argparse as ap
from math import log10

#import torch
#import torch.nn as nn
#import torch.optim as optim
#from torch.autograd import Variable
#from torch.utils.data import DataLoader
from hicplus import utils
#import model
import argparse
from hicplus import trainConvNet
import numpy as np

chrs_length = [249250621,243199373,198022430,191154276,180915260,171115067,159138663,146364022,141213431,135534747,135006516,133851895,115169878,107349540,102531392,90354753,81195210,78077248,59128983,63025520,48129895,51304566]

#chrN = 21
#scale = 16

def main(args):

    highres = utils.matrix_extract(args.chromosome, 10000, args.inputfile) ####用straw函数，具体看看版本，版本不对则运行则代码差别很大，python3 -m pip install hic-straw
    #def matrix_extract(chrN1, chrN2, binsize, hicfile):
        #result = straw.straw('NONE', hicfile, str(chrN1),str(chrN2),'BP',binsize)
    

    print('dividing, filtering and downsampling files...')

    highres_sub,index = next(utils.divide(highres))#####因为用yield产生的结果，所以要加next调用。这一步是按照比例生成训练集！！！

'''
def divide(HiCmatrix):
    subImage_size = 40 ######这个是什么意思？
    step = 25

    #chrN = 21  ##need to change.

    total_loci = HiCmatrix.shape[0]
    #print(HiCmatrix.shape)
    for i in range(0, total_loci, step):
        result = []
        index = []
        for j in range(0, total_loci, ):
            if (i + subImage_size >= total_loci or j + subImage_size >= total_loci):
                continue
            subImage = HiCmatrix[i:i + subImage_size, j:j + subImage_size]

            result.append([subImage, ])
            tag = 'test'
            index.append((tag, i, j))
            np.savetxt('./index.txt',index, fmt="%d", delimiter=" ")
            np.savetxt('./resu.txt',result, fmt="%d", delimiter=" ")
        result = np.array(result)
    #print(result.shape)
    #result = result.astype(np.double)
        index = np.array(index)
        yield result,index
'''







    print(highres_sub.shape)
    #np.save(infile+"highres",highres_sub)
>>> lowres = utils.genDownsample(highres,0.1)  ######按照比例对提取出来的矩interraction进行降采样
    lowres = utils.genDownsample(highres,1/float(40))
'''
    TypeError: only size-1 arrays can be converted to Python scalars
    
    
 import numpy as np
#import matplotlib.pyplot as plt
import os,struct
import random
import straw
from scipy.sparse import csr_matrix, coo_matrix, vstack, hstack
from scipy import sparse
import numpy as np   
    
    
def genDownsample(original_sample, rate):
    result = np.zeros(original_sample.shape).astype(float)
    
    result1 = np.zeros(highres.shape).astype(float)
    
    
    for i in range(0, original_sample.shape[0]):
        for j in range(0, original_sample.shape[1]):
            for k in range(0, int(original_sample[i][j])):
                if (random.random() < rate):
                    result[i][j] += 1
    return result    
    
'''    
    
    
    
    
    
    
    
    
    
    
    lowres_sub,index = next(utils.divide(lowres))
    print(lowres_sub.shape)
    #np.save(infile+"lowres",lowres_sub)
    
    
    
    
np.savetxt('./lowres_sub.txt',lowres_sub, fmt="%d", delimiter=" ")
np.savetxt('./highres_sub.txt',highres_sub, fmt="%d", delimiter=" ")
    print('start training...')
    trainConvNet.train(lowres_sub,highres_sub,"my_outmodel")


    print('finished...')












####
import numpy as np
#import matplotlib.pyplot as plt
import os,struct
import random
import straw
from scipy.sparse import csr_matrix, coo_matrix, vstack, hstack
from scipy import sparse
import numpy as np

def readcstr(f):
    buf = ""
    while True:
        b = f.read(1)
        b = b.decode('utf-8', 'backslashreplace')
        if b is None or b == '\0':
            return str(buf)
        else:
            buf = buf + b

def read_hic_header(hicfile):

    if not os.path.exists(hicfile):
        return None  # probably a cool URI

    req = open(hicfile, 'rb')
    magic_string = struct.unpack('<3s', req.read(3))[0]
    req.read(1)
    if (magic_string != b"HIC"):
        return None  # this is not a valid .hic file

    info = {}
    version = struct.unpack('<i', req.read(4))[0]
    info['version'] = str(version)

    masterindex = struct.unpack('<q', req.read(8))[0]
    info['Master index'] = str(masterindex)

    genome = ""
    c = req.read(1).decode("utf-8")
    while (c != '\0'):
        genome += c
        c = req.read(1).decode("utf-8")
    info['Genome ID'] = str(genome)

    nattributes = struct.unpack('<i', req.read(4))[0]
    attrs = {}
    for i in range(nattributes):
        key = readcstr(req)
        value = readcstr(req)
        attrs[key] = value
    info['Attributes'] = attrs

    nChrs = struct.unpack('<i', req.read(4))[0]
    chromsizes = {}
    for i in range(nChrs):
        name = readcstr(req)
        length = struct.unpack('<i', req.read(4))[0]
        if name != 'ALL':
            chromsizes[name] = length

    info['chromsizes'] = chromsizes

    info['Base pair-delimited resolutions'] = []
    nBpRes = struct.unpack('<i', req.read(4))[0]
    for i in range(nBpRes):
        res = struct.unpack('<i', req.read(4))[0]
        info['Base pair-delimited resolutions'].append(res)

    info['Fragment-delimited resolutions'] = []
    nFrag = struct.unpack('<i', req.read(4))[0]
    for i in range(nFrag):
        res = struct.unpack('<i', req.read(4))[0]
        info['Fragment-delimited resolutions'].append(res)

    return info

def matrix_extract(chrN1, chrN2, binsize, hicfile):

    result = straw.straw('NONE', hicfile, str(chrN1),str(chrN2),'BP',binsize)
    ##
      ###def straw(norm, infile, chr1loc, chr2loc, unit, binsize, is_synapse=False):

    result = straw.straw('NONE','/home/yyp/hicplu/GSE63525_GM12878_insitu_primary_30.hic',str(19),str(19),'BP',10000)
    np.savetxt('./result.txt',result, fmt="%d", delimiter=" ") ##list
    row = [r//binsize for r in result[0]]
    col = [c//binsize for c in result[1]]
    value = result[2]
    Nrow = max(row) + 1
    Ncol = max(col) + 1
    N = max(Nrow, Ncol)

    #print(N)
    M = csr_matrix((value, (row,col)), shape=(N,N))
    M = csr_matrix.todense(M)

    return(M)
np.savetxt('./M.txt',M, fmt="%d", delimiter=" ")
    # M = np.array(M)
    # x, y = np.where(M!=0)
    # M[y, x] = M[x, y]
    #rowix = range(start1//binsize, end1//binsize+1)
    #colix = range(start2//binsize, end2//binsize+1)
    #print(rowix,colix)
    #M = M[np.ix_(rowix, colix)]
    #N = M.shape[1]

def divide(HiCmatrix):
    subImage_size = 40
    step = 25

    #chrN = 21  ##need to change.

    total_loci = HiCmatrix.shape[0]
    #print(HiCmatrix.shape)
    for i in range(0, total_loci, step):
        result = []
        index = []
        for j in range(0, total_loci, ):
            if (i + subImage_size >= total_loci or j + subImage_size >= total_loci):
                continue
            subImage = HiCmatrix[i:i + subImage_size, j:j + subImage_size]

            result.append([subImage, ])
            tag = 'test'
            index.append((tag, i, j))
            np.savetxt('./index.txt',index, fmt="%d", delimiter=" ")
            np.savetxt('./resu.txt',result, fmt="%d", delimiter=" ")
        result = np.array(result)
    #print(result.shape)
    #result = result.astype(np.double)
        index = np.array(index)
        yield result,index


def train_divide(HiCmatrix):
    subImage_size = 40
    step = 25
    result = []
    index = []
    #chrN = 21  ##need to change.

    total_loci = HiCmatrix.shape[0]
    #print(HiCmatrix.shape)
    for i in range(0, total_loci, step):
        for j in range(0, total_loci, ):
            if (abs(i-j)>201 or i + subImage_size >= total_loci or j + subImage_size >= total_loci):
                continue
            subImage = HiCmatrix[i:i + subImage_size, j:j + subImage_size]

            result.append([subImage, ])
            tag = 'test'
            index.append((tag, i, j))
    result = np.array(result)
    #print(result.shape)
    result = result.astype(np.double)
    index = np.array(index)
    return result, index  ##next(k)
    
    
 lowres = utils.genDownsample(highres,1/float(40))
def genDownsample(original_sample, rate):
    result = np.zeros(original_sample.shape).astype(float)
    
    result1 = np.zeros(highres.shape).astype(float)
    
    
    for i in range(0, original_sample.shape[0]):
        for j in range(0, original_sample.shape[1]):
            for k in range(0, int(original_sample[i][j])):
                if (random.random() < rate):
                    result[i][j] += 1
    return result



for i in range(0, highres.shape[0]):
        for j in range(0, highres.shape[1]):
            for k in range(0, int(highres[i][j])): #int(highres[i,j]):
            for k in range(0, int(highres[i,j])):
                if (random.random() < 1/float(40)):
                    result1[i][j] += 1











if __name__ == "__main__":
    main()







